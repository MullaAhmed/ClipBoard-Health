import plotly.graph_objects as go

def plot_cumulative_revenue(monthly_revenues,approach):
   
    months = [f"Month {i+1}" for i in range(len(monthly_revenues))]
    
    # Calculate cumulative Customer Lifetime Values
    cumulative_revenues = [sum(monthly_revenues[:i+1]) for i in range(len(monthly_revenues))]
    
    # Filter even months
    even_months = [month for i, month in enumerate(months) if (i + 1) % 2 == 0]
    
    # Create the bar plot for monthly Customer Lifetime Value
    fig = go.Figure(go.Scatter(x=months, y=cumulative_revenues, 
                             mode='lines+markers', name='Cumulative Customer Lifetime Value'))
    
    # Update layout to show only even months on the x-axis
    fig.update_layout(
        title=f'Cumulative Customer Lifetime Value (Approach {approach})',
        xaxis_title='Month',
        yaxis_title='Customer Lifetime Value',
        template='plotly_white',
        xaxis=dict(
            tickmode='array',
            tickvals=[month for i, month in enumerate(months) if (i + 1) % 2 == 0],
            ticktext=even_months
        )
    )
    
    # Show the plot
   
    fig.show()
    fig.update_layout(width=1400, height=650)
    fig.write_image(f"graphs/images/cummulative_revenue_approach_{approach}_{len(monthly_revenues)}.png") 
    fig.write_html(f"graphs/htmls/cummulative_revenue_approach_{approach}_{len(monthly_revenues)}.html")


def plot_monthly_revenue(monthly_revenues,approach):
   
    months = [f"Month {i+1}" for i in range(len(monthly_revenues))]
      
    # Filter even months
    even_months = [month for i, month in enumerate(months) if (i + 1) % 2 == 0]
    
    # Create the bar plot for monthly Customer Lifetime Value
    fig = go.Figure(data=[go.Bar(x=months, y=monthly_revenues, name='Monthly Customer Lifetime Value')])
    
    # Update layout to show only even months on the x-axis
    fig.update_layout(
        title=f'Monthly Customer Lifetime Value (Approach {approach})',
        xaxis_title='Month',
        yaxis_title='Customer Lifetime Value',
        template='plotly_white',
        xaxis=dict(
            tickmode='array',
            tickvals=[month for i, month in enumerate(months) if (i + 1) % 2 == 0],
            ticktext=even_months
        )
    )
    
    # Show the plot
    fig.show()
    fig.update_layout(width=1400, height=650)
    fig.write_image(f"graphs/images/monthly_revenue_approach_{approach}_{len(monthly_revenues)}.png") 
    fig.write_html(f"graphs/htmls/monthly_revenue_approach_{approach}_{len(monthly_revenues)}.html")


def plot_cumulative_revenue_compare(monthly_revenues_24,monthly_revenues_120):
   
    months = [f"Month {i+1}" for i in range(len(monthly_revenues_24))]
    
    # Calculate cumulative Customer Lifetime Values
    cumulative_revenues_24 = [sum(monthly_revenues_24[:i+1]) for i in range(len(monthly_revenues_24))]
    cumulative_revenues_120 = [sum(monthly_revenues_120[:i+1]) for i in range(len(monthly_revenues_120))]
    
    # Filter even months
    even_months = [month for i, month in enumerate(months) if (i + 1) % 2 == 0]
    
   
    # Add the line plot for cumulative Customer Lifetime Value
    fig=go.Figure(go.Scatter(x=months, y=cumulative_revenues_24, 
                             mode='lines+markers', name='Cumulative Customer Lifetime Value for Approach 1'))
    fig.add_trace(go.Scatter(x=months, y=cumulative_revenues_120, 
                             mode='lines+markers', name='Cumulative Customer Lifetime Value for Approach 2',line=dict(color='green')))
    
    # Update layout to show only even months on the x-axis
    fig.update_layout(
        title='Cumulative Customer Lifetime Value Comparison',
        xaxis_title='Month',
        yaxis_title='Customer Lifetime Value',
        template='plotly_white',
        xaxis=dict(
            tickmode='array',
            tickvals=[month for i, month in enumerate(months) if (i + 1) % 2 == 0],
            ticktext=even_months
        )
    )
    
    # Show the plot
    fig.show()
    fig.update_layout(width=1400, height=650)
    fig.write_image(f"graphs/images/comaptative_revenue_{len(monthly_revenues_24)}.png") 
    fig.write_html(f"graphs/htmls/comaptative_revenue_{len(monthly_revenues_24)}.html")

# Example usage
monthly_revenues_24 =  [105800, 111500, 117000, 122400, 127600, 132700, 137700, 142600, 147300, 152000, 156500, 160900, 165300.0, 169700.0, 174320.0, 179823.99999999997, 186688.80000000005, 195186.5600000003, 204250.88000000015, 212382.08, 214914.5600000004, 213714.5600000004, 212414.5600000004, 211014.5600000004, 159100, 163000, 166800, 170800, 174700, 178500, 182400, 186200, 189700, 193500, 197100, 200600, 204200.0, 207800.0, 211820.0, 216423.99999999997, 222388.80000000005, 230086.5600000003, 238250.88000000015, 245582.08, 247314.5600000004, 245414.5600000004, 243314.5600000004, 240914.5600000004, 188200, 191200, 194100, 197400, 200600, 203700, 207000, 210300, 213100, 216500, 219500, 222500, 225700.0, 228900.0, 232620.0, 236723.99999999997, 242288.80000000005, 249486.5600000003, 257250.88000000015, 264182.07999999996, 265514.5600000004, 263214.5600000004, 260614.5600000004, 257714.5600000004, 204600, 207100, 209500, 212300, 215100, 217800, 220800, 223700, 226200, 229300, 232000, 234700, 237600.0, 240600.0, 244220.0, 248023.99999999997, 253288.80000000005, 260286.5600000003, 267750.8800000001, 274382.07999999996, 275514.5600000004, 272914.5600000004, 270014.5600000004, 266814.5600000004, 213400, 215600, 217700, 220300, 222800, 225300, 228100, 230900, 233200, 236200, 238800, 241300, 244100.0, 247000.0, 250520.0, 254223.99999999997, 259388.80000000005, 266186.5600000003, 273550.8800000001, 280082.07999999996, 281014.5600000004, 278314.5600000004, 275314.5600000004, 271914.5600000004]
monthly_revenues_120 = [105800, 111500, 117000, 122300.0, 126900, 131700.0, 136200, 140600, 145400, 149500.0, 153600, 157700, 162000, 166300, 170600, 174800, 178900, 182900, 186900, 190800, 194600, 198300, 202000, 205700, 209300, 212900.0, 215800, 219200, 222500, 225900.0, 228700, 232000.0, 234500, 237400, 240300, 243300, 246300, 249000, 252000, 255000, 257900.0, 259900, 262600, 265300, 267600, 270300.0, 272500, 275200, 277700, 280300, 282900.0, 285000, 287300, 289700.0, 291700, 293500, 296000.0, 298600.0, 301320.0, 304084.0, 303000, 305100, 307300, 309500, 311800.0, 312700, 315000.0, 316600, 318400, 320600.0, 322100, 324300.0, 325400, 327200, 329300.0, 331600.0, 333920.0, 336084.0, 338620.8, 341364.95999999996, 342864.95999999996, 344364.95999999996, 341400, 343500.0, 344700, 346600.0, 348000, 349800.0, 350000, 352000.0, 352700, 354200, 356000.0, 357100.0, 359220.0, 359300, 360300, 362200.0, 364000.0, 366020.0, 366784.0, 365500, 367200, 368900, 370700.0, 372600.0, 374620.0, 371700, 373400.0, 373100.0, 370700, 370200, 371900, 372100, 373800.0, 374400, 376200, 377700.0, 376300.0, 366920.0]

monthly_revenues_24=[3669.852373239937, 3119.374517253947, 3119.374517253947, 3669.852373239937, 3669.852373239937, 3669.852373239937, 4317.473380282279, 4317.473380282279, 3669.852373239937, 5079.380447390918, 4317.473380282279, 4317.473380282279, 5110.248686579117, 5207.465470271156, 7587.232854854004, 5036.12499511499, 5513.737813470551, 6123.103233325621, 6804.284051490383, 7466.556484484986, 7760.582174294388, 7790.3600676624865, 6692.058264670475, 5796.294626190366, 3669.852373239937, 3119.374517253947, 3119.374517253947, 3669.852373239937, 3669.852373239937, 3669.852373239937, 4317.473380282279, 4317.473380282279, 3669.852373239937, 5079.380447390918, 4317.473380282279, 4317.473380282279, 5104.346644474025, 5183.621063140356, 7483.916272041328, 4902.534525118272, 5290.486590019076, 5783.349128833514, 6334.1737999133875, 6868.961975897842, 7111.571968162871, 7142.883682327632, 6134.02514708285, 5307.131211095521, 3669.852373239937, 3119.374517253947, 3119.374517253947, 3669.852373239937, 3669.852373239937, 3669.852373239937, 4317.473380282279, 4317.473380282279, 3669.852373239937, 5079.380447390918, 4317.473380282279, 4317.473380282279, 5101.960461561552, 5173.87852327259, 7441.592243918609, 4847.8359199974, 5198.741321879916, 5644.357145004522, 6141.0568312440555, 6622.998674017534, 6843.104813296804, 6874.179661618015, 5902.313758556009, 5102.644707653709, 3669.852373239937, 3119.374517253947, 3119.374517253947, 3669.852373239937, 3669.852373239937, 3669.852373239937, 4317.473380282279, 4317.473380282279, 3669.852373239937, 5079.380447390918, 4317.473380282279, 4317.473380282279, 5100.825981696438, 5169.2224536745025, 7421.248630393643, 4821.59695242065, 5155.072508530264, 5577.790410801212, 6049.316134638688, 6507.079334174882, 6716.257620862705, 6748.008313673649, 5793.621642593659, 5006.910597153165, 3669.852373239937, 3119.374517253947, 3119.374517253947, 3669.852373239937, 3669.852373239937, 3669.852373239937, 4317.473380282279, 4317.473380282279, 3669.852373239937, 5079.380447390918, 4317.473380282279, 4317.473380282279, 5100.253161989675, 5166.864579935752, 7411.021015640375, 4808.2735122894255, 5132.668604003512, 5544.161626179122, 6002.4690750059835, 6447.199187056362, 6651.727788216957, 6682.970658828669, 5736.834540439038, 4957.151088009615]
monthly_revenues_120=[3119.374517253947, 3669.852373239937, 4317.473380282279, 4352.9933736267385, 3119.374517253947, 2671.7162107043614, 3669.852373239937, 2651.4683396658547, 5079.380447390918, 2669.2932867265786, 5079.380447390918, 3119.374517253947, 7030.284356250405, 5975.741702812844, 5975.741702812844, 5079.380447390918, 5079.380447390918, 5079.380447390918, 5975.741702812844, 7030.284356250405, 7030.284356250405, 5079.380447390918, 7030.284356250405, 5975.741702812844, 8270.9227720593, 7063.422582112242, 5079.380447390918, 5975.741702812844, 9730.497378893295, 8307.657893521671, 5975.741702812844, 8306.688882876158, 5079.380447390918, 5079.380447390918, 5079.380447390918, 11447.643975168581, 5975.741702812844, 5079.380447390918, 8270.9227720593, 7030.284356250405, 9768.337115233322, 5079.380447390918, 5975.741702812844, 5975.741702812844, 5079.380447390918, 7056.365893330632, 7030.284356250405, 7030.284356250405, 13467.816441374802, 11447.643975168581, 7055.201169458296, 11447.643975168581, 5975.741702812844, 13514.425911446242, 11447.643975168581, 5079.380447390918, 8298.93603828147, 8332.198973128343, 8371.749594640442, 8418.88561002072, 5079.380447390918, 15844.489931029182, 7030.284356250405, 7030.284356250405, 11484.447179129627, 5079.380447390918, 9761.461551463946, 15844.489931029182, 5975.741702812844, 8296.7815112403, 15844.489931029182, 8322.167524162744, 13467.816441374802, 18640.576389446098, 8296.09677294346, 9795.377012017101, 8361.82507237768, 7143.933041048723, 8455.72661989247, 8516.867126404599, 8515.76737195424, 8514.677408443777, 13467.816441374802, 11481.043356331844, 7030.284356250405, 15890.30309183269, 15844.489931029182, 8318.415771061784, 5975.741702812844, 13506.15895989028, 25800.105729337163, 7030.284356250405, 15978.859562218697, 11518.497137731405, 11564.53127615371, 11447.643975168581, 5975.741702812844, 11479.315405535935, 8321.139381147665, 9882.185314192433, 7134.31529076093, 7030.284356250405, 15844.489931029182, 15844.489931029182, 9756.7995628137, 13620.920717319004, 8474.180584711294, 8270.9227720593, 9809.148526450821, 4406.7818428465125, 21930.089869936583, 4317.473380282279, 15844.489931029182, 5079.380447390918, 9756.580995070079, 25800.105729337163, 13467.816441374802, 8337.010585875456, 3795.8896866419723, 2677.9690255671967]


month_length =  120

# plot_cumulative_revenue(monthly_revenues_24[:month_length],1)
# plot_monthly_revenue(monthly_revenues_24[:month_length],1)
# plot_cumulative_revenue(monthly_revenues_120[:month_length],2)
# plot_monthly_revenue(monthly_revenues_120[:month_length],2)
plot_cumulative_revenue_compare(monthly_revenues_24[:month_length],monthly_revenues_120[:month_length])